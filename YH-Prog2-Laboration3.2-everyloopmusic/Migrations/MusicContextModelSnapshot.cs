// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YH_Prog2_Laboration3._2_everyloopmusic.Models;

#nullable disable

namespace YH_Prog2_Laboration3._2_everyloopmusic.Migrations
{
    [DbContext(typeof(MusicContext))]
    partial class MusicContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("YH_Prog2_Laboration3._2_everyloopmusic.Models.Album", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.HasKey("AlbumId");

                    b.HasIndex("ArtistId");

                    b.ToTable("albums", "music");
                });

            modelBuilder.Entity("YH_Prog2_Laboration3._2_everyloopmusic.Models.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("ArtistId");

                    b.ToTable("artists", "music");
                });

            modelBuilder.Entity("YH_Prog2_Laboration3._2_everyloopmusic.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("GenreId");

                    b.ToTable("genres", "music");
                });

            modelBuilder.Entity("YH_Prog2_Laboration3._2_everyloopmusic.Models.MediaType", b =>
                {
                    b.Property<int>("MediaTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("MediaTypeId");

                    b.ToTable("media_types", "music");
                });

            modelBuilder.Entity("YH_Prog2_Laboration3._2_everyloopmusic.Models.Playlist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaylistId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("PlaylistId");

                    b.ToTable("playlists", "music");
                });

            modelBuilder.Entity("YH_Prog2_Laboration3._2_everyloopmusic.Models.PlaylistTrack", b =>
                {
                    b.Property<int>("PlaylistTrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlaylistTrackId"), 1L, 1);

                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("PlaylistTrackId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("TrackId");

                    b.HasIndex(new[] { "PlaylistTrackId" }, "IX_playlist_track_PlaylistTrackId")
                        .IsUnique();

                    b.ToTable("playlist_track", "music");
                });

            modelBuilder.Entity("YH_Prog2_Laboration3._2_everyloopmusic.Models.Track", b =>
                {
                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.Property<int?>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int?>("Bytes")
                        .HasColumnType("int");

                    b.Property<string>("Composer")
                        .HasMaxLength(220)
                        .HasColumnType("nvarchar(220)");

                    b.Property<int?>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MediaTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Milliseconds")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("TrackId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("GenreId");

                    b.HasIndex("MediaTypeId");

                    b.ToTable("tracks", "music");
                });

            modelBuilder.Entity("YH_Prog2_Laboration3._2_everyloopmusic.Models.Album", b =>
                {
                    b.HasOne("YH_Prog2_Laboration3._2_everyloopmusic.Models.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .IsRequired()
                        .HasConstraintName("FK_albums_artists");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("YH_Prog2_Laboration3._2_everyloopmusic.Models.PlaylistTrack", b =>
                {
                    b.HasOne("YH_Prog2_Laboration3._2_everyloopmusic.Models.Playlist", "Playlist")
                        .WithMany("PlaylistTracks")
                        .HasForeignKey("PlaylistId")
                        .IsRequired()
                        .HasConstraintName("FK_playlist_track_playlists");

                    b.HasOne("YH_Prog2_Laboration3._2_everyloopmusic.Models.Track", "Track")
                        .WithMany("PlaylistTracks")
                        .HasForeignKey("TrackId")
                        .IsRequired()
                        .HasConstraintName("FK_playlist_track_tracks");

                    b.Navigation("Playlist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("YH_Prog2_Laboration3._2_everyloopmusic.Models.Track", b =>
                {
                    b.HasOne("YH_Prog2_Laboration3._2_everyloopmusic.Models.Album", "Album")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("FK_tracks_albums");

                    b.HasOne("YH_Prog2_Laboration3._2_everyloopmusic.Models.Genre", "Genre")
                        .WithMany("Tracks")
                        .HasForeignKey("GenreId")
                        .HasConstraintName("FK_tracks_genres");

                    b.HasOne("YH_Prog2_Laboration3._2_everyloopmusic.Models.MediaType", "MediaType")
                        .WithMany("Tracks")
                        .HasForeignKey("MediaTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_tracks_media_types");

                    b.Navigation("Album");

                    b.Navigation("Genre");

                    b.Navigation("MediaType");
                });

            modelBuilder.Entity("YH_Prog2_Laboration3._2_everyloopmusic.Models.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("YH_Prog2_Laboration3._2_everyloopmusic.Models.Artist", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("YH_Prog2_Laboration3._2_everyloopmusic.Models.Genre", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("YH_Prog2_Laboration3._2_everyloopmusic.Models.MediaType", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("YH_Prog2_Laboration3._2_everyloopmusic.Models.Playlist", b =>
                {
                    b.Navigation("PlaylistTracks");
                });

            modelBuilder.Entity("YH_Prog2_Laboration3._2_everyloopmusic.Models.Track", b =>
                {
                    b.Navigation("PlaylistTracks");
                });
#pragma warning restore 612, 618
        }
    }
}
